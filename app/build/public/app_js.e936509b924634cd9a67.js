!function(n){var e={};function t(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return n[s].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=n,t.c=e,t.d=function(n,e,s){t.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:s})},t.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="http://localhost:2992/assets/",t(t.s=12)}([,,,,,,,,,function(n,e){n.exports="console.log('test1')\n\nconst ENTER_KEY = 13\nconst ESCAPE_KEY = 27\n\n// A factory function we can use to create binding handlers for specific\n// keycodes.\nfunction keyhandlerBindingFactory(keyCode) {\n  return {\n    init: function (element, valueAccessor, allBindingsAccessor, data, bindingContext) {\n      var wrappedHandler, newValueAccessor\n\n      // wrap the handler with a check for the enter key\n      wrappedHandler = function (data, event) {\n        if (event.keyCode === keyCode) {\n          valueAccessor().call(this, data, event)\n        }\n      }\n\n      // create a valueAccessor with the options that we would want to pass to the event binding\n      newValueAccessor = function () {\n        return {\n          keyup: wrappedHandler\n        }\n      }\n\n      // call the real event binding's init function\n      ko.bindingHandlers.event.init(element, newValueAccessor, allBindingsAccessor, data, bindingContext)\n    }\n  }\n}\n\n// a custom binding to handle the enter key\nko.bindingHandlers.enterKey = keyhandlerBindingFactory(ENTER_KEY)\n\n// another custom binding, this time to handle the escape key\nko.bindingHandlers.escapeKey = keyhandlerBindingFactory(ESCAPE_KEY)\n\n\n// Category model\nclass Category {\n  constructor(data, isPlaceholder) {\n    // keep track of whether or not Category is a dummy,\n    // and need's to be updated from the server\n    this.isPlaceholder = isPlaceholder\n\n    if (!isPlaceholder) {\n      // map data keys and values to Category\n      for (let prop in data) {\n        if (data.hasOwnProperty(prop))  {\n          eval(`this.${prop} = data.${prop}`)\n        }\n      }\n\n    } else {\n      // give object filler attribute values to satisify the DOM\n      this.id = Math.random().toString(36).substring(7)\n      this.name = data.name\n      this.depth = -1\n      this.type = -1\n      this.parentId = -1\n    }\n\n  }\n}\n\n// TODO: seperate concerns by using KO components\n\n// ViewModel\nconst CategoryList = function(categories) {\n  const self = this\n\n  // state\n  this.isEditing = ko.observable(false)\n  this.canAdd = ko.observable(false)\n  this.activeCategoryId = ko.observable(-1)\n  this.isActiveClass = function(id) {\n    return this.activeCategoryId() == id ? 'active' : ''\n  }.bind(this)\n  this.editedCategories = []\n\n\n  // setters\n  this.setIsEditing = function() {\n    this.isEditing(!this.isEditing())\n\n    if (this.isEditing() && this.canAdd()) {\n      this.setCanAdd()\n    }\n\n  }.bind(this)\n\n  this.setCanAdd = function() {\n    this.canAdd(!this.canAdd())\n\n    if (this.isEditing() && this.canAdd) {\n      this.setIsEditing()\n    }\n\n  }.bind(this)\n\n  this.setActiveCategoryId = function(id) {\n    this.activeCategoryId(id)\n  }.bind(this)\n\n\n  // map array of passed in categories to an observableArray of category objects\n  if (categories.length > 0) { // protect against null list\n    this.categories = ko.observableArray(categories.map((category) => {\n      return new Category(category)\n    }))\n\n    this.setActiveCategoryId(this.categories()[0].id)\n  } else {\n    this.categories = ko.observableArray([])\n  }\n\n\n  // methods\n  this.categoryEdited = function(context, event) {\n    // update DOM\n    if (event.target.value.length > 0 && event.target.placeholder != event.target.value) {\n      context.name = event.target.value\n\n      // add category object to editedCategories list\n      this.editedCategories.push(context)\n    }\n\n  }.bind(this)\n\n  this.onEditButtonClick = function() {\n    this.setIsEditing()\n\n    if (!this.isEditing()) {\n      // update server\n      $.post({\n        url : '/categories/update',\n        data : {\n          categories : JSON.stringify(this.editedCategories)\n        },\n        success: successHandler.bind(this),\n        dataType: 'json'\n      })\n\n      function successHandler(data) {\n        // success message\n        console.log('Successfuly updated categories on the server.')\n\n        // reset editedCategories\n        this.editedCategories = []\n      }\n    }\n\n    this.setFirstCategoryBorderRadius()\n\n  }.bind(this)\n\n  this.onAddButtonClick = function() {\n    this.setCanAdd()\n\n    const el = document.getElementById('canAddInput')\n\n    if (this.canAdd()) {\n      el.focus()\n    } else {\n      el.value = \"\"\n    }\n\n    this.setFirstCategoryBorderRadius()\n\n  }.bind(this)\n\n  this.setFirstCategoryBorderRadius = function() {\n    console.log('called')\n    // change first list item border-radius\n    const firstCategory = document.getElementById('category-list').children[1]\n\n    if (firstCategory) {\n      if (!this.canAdd()) {\n        firstCategory.style.borderTopRightRadius = '3px'\n        firstCategory.style.borderTopLeftRadius = '3px'\n      } else {\n        firstCategory.style.borderTopRightRadius = '0px'\n        firstCategory.style.borderTopLeftRadius = '0px'\n      }\n    }\n\n  }.bind(this)\n\n  this.createCategory = function(context, event) {\n    const el = event.target\n    const name = el.value\n\n    if (name.length > 0) {\n      // create a new dummy category and get a reference to its id\n      const category = new Category({ name }, true)\n\n      // update the DOM\n      this.categories.unshift(category)\n\n      // clear and hide input element\n      el.value = \"\"\n      this.canAdd(false)\n\n      // update server\n      $.post({\n        url : '/categories/new',\n        data : {\n          name\n        },\n        success: successHandler.bind(this),\n        dataType: 'json'\n      })\n\n      // success handler for AJAX POST request\n      function successHandler(data) {\n        // success message\n        console.log(`Successfuly created \"${data.name}\" category on the server.`)\n\n        // update the dummy category object with real data\n        for (let key in data) category[key] = data[key]\n\n        this.setFirstCategoryBorderRadius()\n      }\n\n    }\n  }\n\n  this.deleteCategory = function(id, context, event) {\n    // handle event object\n    this.inputClicked(context, event)\n\n    // delete category object from DOM\n    this.categories.remove(context)\n\n    // remove category from server\n    $.post({\n      url : `/categories/${id}/delete`,\n      data : {\n        name\n      },\n      success: function(data) {\n        // success message\n        console.log(`Successfuly deleted ${data.name}\" category on the server.`)\n      },\n      dataType: 'json'\n    })\n\n    this.setFirstCategoryBorderRadius()\n\n  }.bind(this)\n\n  this.inputClicked = function(context, event) {\n    event.preventDefault()\n    event.stopPropagation()\n  }\n\n}\n\nmodule.exports = CategoryList\n"},function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},function(n,e,t){t(10)(t(9))},function(n,e,t){n.exports=t(11)}]);